Изучение языка программирования через портирование знакомого приложения
=================================================================================================
В интернете часто встречается вопрос, что почитать, чтобы лучше узнать язык X? Я же надеюсь ответить на другой вопрос: что лучше написать, чтобы лучше узнать язык X?

Организационные вопросы
-----------------------
Каждый час будет пятнадцатиминутный перерыв.

После каждого логического блока лекции я буду делать небольшую паузу для вопросов, указывая на это словом "вопросы" произнесённым с вопросительной интонацией. Вопросы относящиеся к лекции косвенно и вопросы которые требуют много времени на ответ, я буду откладывать до перерывов/конца лекции.

План лекции, глоссарий по используемому в ходе этой лекции языку программирования и информация о портируемом приложении есть на гитхабе вот тут https://github.com/blin/app2lang . Примерный план написания приложения можно найти в соседнем репозитории, например https://github.com/blin/grep2py .

Я настоятельно рекомендую склонировать(создать локальную копию) оба репозитория. Для этого нужно сделать

.. code-block:: bash

    $ git clone https://github.com/blin/app2lang.git

Вы можете свободно перемещаться по истории коммитов, так что если вы не хотите самостоятельно писать код или не успеваете за ходом лекции, вы можете переместиться на соответствующий коммит следующим образом

.. code-block:: bash

    $ git log --pretty=oneline
    ...
    b35da177a915acfa4a863175df83b7753767971c Input is now processed line by line
    ...
    $ git checkout b35da177a915acfa4a863175df83b7753767971c

Чтобы перейти к самому последнему коммиту, нужно сделать следующее

.. code-block:: bash

    $ git reset --hard # нужно делать, только если были произведены какие-то изменения
    $ git checkout master

Почему lang?
--------------
Почему для этой лекции выбран именно этот язык программирования?

Почему app?
------------
Почему во время этой лекции будет портироваться именно это приложение?

Как сделать X?
--------------
Если вы не знаете как сделать X в выбранном вами языке программирования, зайдите на http://stackoverflow.com/ и введите в поиск "[lang] how to X", например "[python] how to read file". Чем чаще в языке возникает необходимость сделать X, тем больше вероятность найти ответ в первом десятке результатов поисковой выдачи.

Разработка через тестирование
-----------------------------
Обычно, для того чтобы проверить правильность работы программы, её нужно использовать и сравнить полученный результат с ожидаемым. Процесс использования программы с целью оценки соответствия программы заданным требованием называют функциональным или приёмочным тестированием. Между написанием кода и функциональным тестированием может пройти значительное количество времени, соответственно между внедрением в код ошибки(или нескольких) и её(их) выявлением может пройти значительное количество времени.

Модульным(unit) тестом обычно называется функция, которая использует написанный код и сверяет полученный результат с ожидаемым. В отличии от функционального тестирования, для модульного тестирования не нужно полностью работающее приложение.

Представим, что у нас есть сайт с формой для регистрации и нам нужно убедиться в том что в имени пользователя нет цифр. Мы можем написать функцию, которая в качестве аргумента будет получать имя пользователя и возвращать является ли имя допустимым или нет. Для того чтобы протестировать эту функцию, мы можем вызвать её с именем содержащим цифры и проверить что функция возвращает ложь(имя не является допустимым), а в случае с именем не содержащим цифры функция возвращает истину(имя является допустимым). Для того чтобы проверить работоспособность этой функции нам не требуется ни сайт ни форма для регистрации.

Test Driven Development(TDD) — это процесс разработки программ, в ходе которого в первую очередь пишутся проваливающиеся тесты, потом пишется код удовлетворяющий эти тесты, после чего проводится улучшение внутренней структуры кода.

Используте код написанный другими людьми
----------------------------------------
Некоторые люди публикуют решения задач, которые у них возникли. Чтобы не решать одну и ту же задачу по несколько раз, можно использовать чужие решения. Многие языки программирования поставляются со стандартной библиотекой таких решений. Перед тем как что-то делать, советую посмотреть нет ли решения в стандартной библиотеке. Если решения нет в стандартной библиотеке, советую посмотреть решение в интернете. Иногда решения ставшие особо популярными в интернете включаются в стандартную библиотеку.

Погружение в код наприсанный другими людьми
-------------------------------------------
Чаще всего нет необходимости в том, чтобы понимать как работает чужой код, если его поведение соответствует ожиданиям. Но если у вас есть время, я рекомендую пробовать разбираться в используемых решениях. Особенно полезна в этом отношении стандартная библиотека, которая представляет собой эталон работы с языком.

Проще попросить прощение, чем разрешение
----------------------------------------
Во многих языках программирования существует понятие исключения(exception), события которое обычно не должно происходить, которое требует особой реакции. 

Например, при попытке открыть файл может возникнуть исключение - файл может быть не доступен для чтения, в таком случае произойдёт(будет брошено(thrown) или поднято(raised)) исключение, на которое нужно отреагировать(поймать(catch), например можно уведомить пользователя о том, что у него не хватает прав на чтение файла).

В языках в которых есть исключения обычно рекомендуется пытаться производить действия, которые могут породить исключения, без оглядки, и если исключение всё же произойдёт, его нужно обработать. Такой подход можно сравнить с другим.

Посмотри по сторонам, перед тем как переходить дорогу
-----------------------------------------------------
В языках в которых нет исключений многие функции возвращают статус указывающий на успешность своего выполнения.

Например, при попытке отркыть файл может вернуться статус, означающий что файл не получилось открыть(например, он не доступен для чтения). Всегда нужно проверять статус выполнения команд перед тем как совершать действия с их результатами, иначе программа не будет функционировать так, как ожидается.
